# -*- coding: utf-8 -*-
"""Curso 00 - Introdução à Computação e Programação

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13JmJQCfetqjN298ZbIUaJlg3_rwn5Nxt

##Curso zero -  Introdução à Computação e Programação

##Aula 01
Estruturas básicas da linguagem
"""

print ('Hello, World!')

#Exercícios - Entrada de dados

A = input ()
B = input ()
print ('Você inseriru', A, 'e', B)

#consersão de input
a = float(input ('a:'))

#print com variáveis

nome = 'Mari'
nasc = '24/12/98'
print ('Olá, %s, eu sei que você nasceu em %s !' % (nome, nasc))

# Calculando o IMC

m = float ( input('Qual seu peso? '))
h = float (input ('E qual sua altura? '))
IMC = m/h**2
print ('Seu IMC é: %.2f' % IMC)

# Calculando o deslocamento de um corpo em movimento

t = float (input('t: '))
a = float (input('a: '))
v0 = float (input('v0: '))

S = v0*t + (a*t**2)/2

print ('O deslocamento é ', S)

# Exercício Variável

x = input ('x: ')
y = input ('y: ')

print ('x antigo: ', x)
print ('y antigo: ', y)

aux = x

x = y 

print ('novo x: ')
print ('novo y: ')

# Variáveis Booleanas
N1 = input ('N1: ')
N2 = input ('N2: ')

print ('N1 > N2: ', N1 > N2)

# Presença ou ausência de correntes
A = True
B = False

print (not A)
print (not B)
print (A and B)
print (A or B)
print (A and not B)

"""##Aula 02
Estrutura condicional IF. O fucionamento das condições é baseado nas estruturas booleanas
"""

# Exercício de verificação de senha

digitada = input ('Digite a senha: ')
if digitada == 'abc1234':
  print ('ACESSO PERMITIDO')
else:
  print ('ACESSO NEGADO')

# Encontrando as raízes de uma equação de segundo grau

a = float ( input ('a: '))
b = float ( input ('b: '))
c = float ( input ('c: '))

delta = b**2 - 4*a*c
if delta > 0:
  x1 = (-b + delta*0.5) / (2*a)
  x2 = (-b - delta*0.5) / (2*a)
  print ('As raíses são x1: %.2f e %.2f' % (x1, x2))
elif delta == 0:
  x = -b / (2*a)
  print ('As duas raízes são x: %.2f' % x)
else: 
  print ('Não existe raízes reais.')

# cálculo da idade 

dd_hoje = 25
mm_hoje = 7
aa_hoje = 2022

dd = int (input('Seu dia de nascimento: '))
mm = int (input('Seu mês de nascimento: '))
aa = int (input('Seu ano de nascimento: '))

if aa_hoje == aa:
  idade = 0
else:
  idade = aa_hoje - aa
  if mm_hoje < mm or (mm_hoje == mm and dd_hoje < dd):
    idade = idade -1
print ('Idade: %d ano(s)' % idade)

# Cálculo do valor total da compra
# Maças: 1,50 cada ou 1,20 para mais que uma dúzia
# Bananas: 0,80 cada
# Desconto de 10% sobre compras a cima de R$10

bananas = int (input ('Qtd de bananas: '))
macas  = int (input ('Qtd de maças: '))


total = 0.80 * bananas
if macas < 12:
  total = total + 1.50 * macas
else:
  total = total + 1.20 * macas

if total > 10:
  total = total * 0.9

print ('Total: %.2f' % total)

# Determiando o tipo de um triângulo

a = float (input ('a: ')) 
b = float (input ('a: ')) 
c = float (input ('a: ')) 

if not a + b + c == 180:
  print ('Não é um triângulo')
elif a == 90 or b == 90 or c == 90:
  print ('É um triângulo retângulo!')
elif a > 90 or b > 90 or c > 90:
  print ('É um triângulo obtusângulo')
else:
  print ('É um triângulo acutângulo')

"""##Aula 03
Comando for  - variável de controle e iteração
"""

# Armazenando apenas pares

s = 0

for i in range (100):
  #checando se é par com o resto da divisão de i por dois
  if not i%2 == 0:
    s = s + 1
print ('Soma: ', s)

# verificação se um número é primo

n = int (input ('Digite um número: '))
teste = True


for i in range (2, n):
  if n % i == 0:
    teste = False
if not teste:
  print ('Não é primo.')
else:
  print ('É primo.')

# Sequência de Fibonacci

n = int(input ('Números de termos: '))

a = 1
b = 1
print ('1')
print ('1')

for i in range (2, n):
    c = a + b
    print (c)
    a = b
    b = c

# Contagem regressiva

def contagemRegressiva(n):
  while n >= 0:
    print (n)
    n = n -1
  print ('Fogo!')

contagemRegressiva(5)

# Iterações para encontrar a raíz quadrada de um número pelo Método de Newton
# O arredondamento pode impossibilitar a igualdade de x e y, portanto, usa-se delta (abs)

a = 4
x = 3

while True:
  print (x)
  y = (x + a/x) / 2
  if abs(y -x) < 0.00001:
    break
  x = y

# Senha com limite de tentativas

max_tentativa = 5

digitada = input ('Digite a senha: ')
count = 1
while digitada != '1234' and count < max_tentativa:
  print ('SENHA INCORRETA')
  count = count + 1
  digitada = input ('Tente novamente: ')
if count < max_tentativa:
  print ('CONECTANDO...')
else: 
  print ('VOCÊ ATINGIU O LIMITE DE TENTATIVAS!')

# Função para verificar a situação da carteira de acordo com velocidade registrada
# até 70 KM, ok
# 2 pontos na carteira para cada 5 KM acima da velocidade
# Com mais de 20 pontos, licença suspensa.

def pontos ( velocidade):
  if velocidade <= 70:
    print ('Dentro da velocidade permitida')
  else:
    p = 2 * ((velocidade -70) // 5)
    print ('Total de pontos: ', p)
    if p > 20:
      print ('Licença suspensa.')

# Calcula a média de uma lista de alunos e retorna quantos deles têm menos de 13 anos e estão abaixo da média.

N = int (input ('Número de alunos: '))
idades = list ()
alturas = list ()

for i in range(N):
  print ('Aluno %d' % i)
  idade = int(input('Digite a idade: '))
  altura = float(input ('Digite a altura: '))
  idades.append(idade)
  alturas.append(altura)
media_alturas = sum(alturas) / N
print ('A média das alturas apresentadas é: %.2f m' % media_alturas)

count = 0
for i in range (len(alturas)):
  if alturas [i] < media_alturas and idades [i] > 13:
    count = count + 1
print ('O número de alunos maiores de 13 anos e com altura abaixo da média é: ', count)

# verificar se duas listas têm elementos comuns

l1 = [1, 3, 5, 1, 4, 7]
l2 = [10, 1, 15, 123]

ha_comum = False
for a in l1:
  for b in l2:
    if a == b:
      ha_comum = True
      break
  if ha_comum:
    break
if ha_comum:
  print ('Existe pelo menos um elemento em comum')
else:
  print ('Não há elementos em comum')

# Ler uma data (dia, mês e ano) e determinar se ela é válida. Lembre-se de que, em anos bissextos, o mês de fevereiro tem 29 dias (um ano é bissexto quando for divisível por 4)

dd = int(input('Dia:'))
mm = int(input('Mes:'))
aaaa= int(input('Ano:'))

if mm==1 or mm==3 or mm==5 or mm==7 or mm==8 or mm==10 or mm==12:
  if dd>0 and dd<=31:
    print('Data válida')
  else:
    print('Data inválida')
elif mm==2:
  # Se o resto da divisão por 4 for igual a zero
  if aaaa % 4 == 0:
    if dd>0 and dd<=29:
      print('Data válida')
    else:
      print('Data inválida')
  else:
    if dd>0 and dd<=28:
      print('Data válida')
    else:
      print('Data inválida')
elif mm>0 and mm<=12:
  if dd>0 and dd<=30:
    print('Data válida')
  else:
    print('Data inválida')
# Mês inválido
else:
  print('Data inválida')

#A prefeitura de uma cidade fez uma pesquisa entre seus habitantes, coletando dados sobre o salário e número de filhos. A prefeitura deseja saber:
# Média do salário da população;
# Média do número de filhos;
# Maior salário;
# Percentual de pessoas com salário até R$1500,00.


N = int(input('Digite o número de pessoas: '))

soma_salario = 0
soma_filhos = 0
maior_salario = 0
percent_pessoas = 0

for i in range(N):
  print('Pessoa %d' % i)
  salario = float(input('Digite o salário: '))
  filhos = int(input('Digite o número de filhos: '))
  soma_salario += salario
  soma_filhos += filhos
  if salario > maior_salario:
    maior_salario = salario
  if salario <= 1500:
    percent_pessoas += 1

print('Média dos salários: %.2f' % (soma_salario/N))
print('Média do número de filhos: %.2f' % (soma_filhos/N))
print('Maior salário:', maior_salario)
print('Percentual com salário até 1500: %.2f' % (float(percent_pessoas)/N * 100))

#Dado um numero inteiro, positivo, imprimir o correspondente número binário. Usar somente operações aritméticas simples (e.g., divisão inteira, resto de divisão).
#Para realizar essa conversão, deve-se realizar a divisão inteira do número por 2 sucessivamente, até que o resultado dessa divisão seja zero. Os restos dessas sucessivas divisões, em ordem reversa, devem ser concatenados, formando o número binário.
#Exemplo Mostrar que  610=1102 :
#6//2 = 3, resto 0
#3//2 = 1, resto 1
#1//2 = 1, resto 1

n = int(input('Digite o número: '))
q = n
resultado = ''
while q !=0:
  r = q % 2
  q = q // 2
  resultado = str(r) + resultado
resultado

#Criar uma função que recebe uma lista e retorna os itens repetidos. Exemplo: Repetidos([1, 2, 2, 3, 4, 3, 3]) retorna [2, 3]

def Repetidos(x):
    tamanho = len(x)
    repetidos = []
    for i in range(tamanho):
        k = i + 1
        for j in range(k, tamanho):
            if x[i] == x[j] and x[i] not in repetidos:
                repetidos.append(x[i])
    return repetidos
    
list1 = [10, 20, 30, 20, 20, 30, 40,
         50, -20, 60, 60, -20, -20, 'a', 'a']
print (Repetidos(list1))

#Criar uma função que retorna uma lista com todos os números primos em um intervalo.

def primos(x, y):
    lista = []
    for i in range(x, y):
      #pular 
        if i == 0 or i == 1:
            continue
        else:
            for j in range(2, int(i/2)+1):
                if i % j == 0:
                    break
            else:
                lista.append(i)
    return lista

primos(2, 11)

# Ler a temperatura média de cada mês do ano e armazená-las em uma lista. Mostrar todas as temperaturas acima da média anual, e em que mês elas ocorreram. Escrever o mês por extenso (e.g., 1->janeiro, 2->fevereiro, etc.).

meses = ['janeiro', 'fevereiro', 'marco', 'abril',
         'maio', 'junho', 'julho', 'agosto', 'setembro',
         'outubro', 'novembro', 'dezembro']
soma_temp = 0
lista_temp = list()
for i in range(len(meses)):
  print(meses[i])
  temperatura = float(input('Digite a temperatura: '))
  soma_temp += temperatura
  lista_temp.append(temperatura)

media_anual = soma_temp / len(meses)
print('Meses com temperatura acima da média:')
for i in range(len(lista_temp)):
  if lista_temp[i] > media_anual:
    print('%s (%.2f)' % (meses[i], lista_temp[i]))

#Criar uma função para determinar o segundo maior elemento de uma dada lista.
def segundo_maior(l):
    if l[0] > l[1]:
        maior = l[0]
        s_maior = l[1]
    else:
        maior = l[1]
        s_maior = l[0]

    for i in range(2,len(l)):
        if l[i] > maior:
            s_maior = maior
            maior = l[i]
        elif l[i] > s_maior:
            s_maior = l[i]
    return s_maior



lista = [3, 20, 7, 8, 1, 10, 14, 9, 12, 11]
print(segundo_maior(lista))

#Criar uma função que recebe uma lista com  N  números reais e retorna uma lista com os números ordenados do menor para o maior. Não usar o método sort() ou equivalentes.

def ordenar(l):
    for i in range(len(l)):
        idx_sel = i
        for j in range(i,len(l)):
            if l[j] < l[idx_sel]:
              idx_sel = j
        aux = l[i]
        l[i] = l[idx_sel]
        l[idx_sel] = aux
    return l

lista = [3, 2, 7, 8, 1, 10, 14, 9, 12]
print(ordenar(lista))

#Criar uma função para verificar se duas listas são circularmente idênticas.

def circ_identicas(l1, l2):
    for i in range(len(l1)):
        identicas = True
        for j in range(len(l2)):
            j_rot = (j+i) % len(l2)
            if l1[j] != l2[j_rot]:
                identicas = False
        if identicas:
            break
    return identicas

l1 = [1,2,3,4,5,6,7,8]
l2 = [3,4,5,6,7,8,1,2]
l3 = [3,3,5,6,7,8,1,2]

print(circ_identicas(l1,l2))
print(circ_identicas(l1,l3))

# Criar uma função que recebe uma lista com número diário de casos de uma doença e retorne a média móvel de 3 dias. Note que essa média não existe para os primeiros dois dias da sequência.

def media_movel(l):
    l_medias = list()
    for i in range(2,len(l)):
        media = (l[i]+l[i-1]+l[i-2]) / 3
        l_medias.append(media)
    return l_medias

l = [212,345,0,59,378,264,0]
print(media_movel(l))